#!/bin/bash

# set -e: stops the script on error
# set -u: stops the script on unset variables
# set -o pipefail:  fail the whole pipeline on first error
# https://www.howtogeek.com/782514/how-to-use-set-and-pipefail-in-bash-scripts-on-linux/
# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
# https://superuser.com/questions/648331/how-to-properly-restore-settings-when-running-a-script-using-source
SAVED_OPTIONS=$(set +o)
set -euo pipefail

# Debug
# set -x # source variables.ini 2> log.txt


# If DEPLOYMENT (enviroment variable) is null or unset, set it to DEV. To avoid
# unbout (-u) error
# TODO: It will be better set default value to PROD
DEPLOYMENT="${DEPLOYMENT:=DEV}"


if [[ "${DEPLOYMENT}" != "DEV" ]] && [[ "${DEPLOYMENT}" != "PROD" ]] && [[ "${DEPLOYMENT}" != "STAGE" ]] ; then
    echo "First argument must be a valid DEPLOYMENT value: DEV | PROD | STAGE"
    echo "Current value ${DEPLOYMENT}"
    return 1
fi


OS_CODENAME=$(lsb_release -cs)

# Works in Vagrant because we make cd /vagrant/server in bootstrap.sh
_this_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"
SETTINGS="${_this_dir}"



PROJECT_NAME=utentes

# function lc() {
#     echo "${1}" | awk '{print tolower($0)}'
# }
#
# PROJECT_NAME_LOWERCASE=$(lc ${PROJECT_NAME})


if [[ ${DEPLOYMENT} == "DEV" ]] ; then
    if id -u "vagrant" >/dev/null 2>&1; then
        DEFAULT_USER=vagrant
    else
        DEFAULT_USER=$(whoami)
        # echo "Vagrant user does not exists. Using: ${DEFAULT_USER}" 1>&2
    fi

else
    : "${DEFAULT_USER:=${PROJECT_NAME}}"
    : "${DEFAULT_USER_PASSWORD:=${DEFAULT_USER_PASSWORD}}"
fi


DEFAULT_USER_HOME=$(getent passwd "${DEFAULT_USER}" | cut -d: -f6)


MY_HOSTNAME="${PROJECT_NAME}"
SSH_PORT=10000
LOCALE="en_ZA.UTF-8"
MY_TIMEZONE="Africa/Maputo"

PG_VERSION=10
PG_CLIENT_VERSION=10
POSTGIS_VERSION=2.5

DBNAME="arasul" # "${PROJECT_NAME}"

if [[ ${DEPLOYMENT} == "DEV" ]] ; then
    PG_POSTGRES_PASSWD=postgres
    DBOWNER=postgres
    PG_ALLOW_EXTERNAL_CON=true
else
    : "${PG_POSTGRES_PASSWD:=${PG_POSTGRES_PASSWD}}"
    DBOWNER=postgres
    PG_ALLOW_EXTERNAL_CON=false
fi

: PG_PORT="${PG_PORT:=9001}"

PGTAP_VERSION=0.98.0
PLGPSQL_CHECK_VERSION=1.2.3
SQITCH_VERSION='1.0.0'

INSTALL_PYTHON_FROM=pyenv
PYTHON_VERSION=3.6.9

WWW_PATH="/var/www/${PROJECT_NAME}"
WWW_MEDIA_PATH="/var/www/media"

GIT_REPO=https://gitlab.com/icarto/utentes-api.git

HTTPS_PROD_BASE_URL=""

DOCUMENT_ROOT=""
WSGI_DAEMON_PROCESS=""

JAVA_H=/usr/lib/jvm/java-8-oracle/
VIRTUALENV_PATH=""
TODAY=$(date '+%y%m%d')

export PSQL="psql --no-psqlrc --no-align --tuples-only --quiet --single-transaction -v ON_ERROR_STOP=1 --pset pager=off -p ${PG_PORT}"
export PG_CONNECTION="-h localhost -p ${PG_PORT} -d ${DBNAME} -U postgres"
export PGRESTORE="/usr/lib/postgresql/${PG_CLIENT_VERSION}/bin/pg_restore --exit-on-error -p ${PG_PORT}"
export PGDUMP="/usr/lib/postgresql/${PG_CLIENT_VERSION}/bin/pg_dump -p ${PG_PORT}"
export PGSQL2SHP="pgsql2shp -h localhost -u postgres -p ${PG_PORT}"
export DROPDB="/usr/lib/postgresql/${PG_CLIENT_VERSION}/bin/dropdb -p ${PG_PORT}"
export CREATEDB="/usr/lib/postgresql/${PG_CLIENT_VERSION}/bin/createdb -p ${PG_PORT}"

eval "${SAVED_OPTIONS}"
unset SAVED_OPTIONS
unset _this_dir
